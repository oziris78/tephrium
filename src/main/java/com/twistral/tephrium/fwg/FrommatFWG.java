// Copyright 2024 Oğuzhan Topaloğlu
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package com.twistral.tephrium.fwg;


import com.twistral.tephrium.prng.SplitMix64Random;
import com.twistral.tephrium.prng.TRandomGenerator;
import com.twistral.tffn.TFFNParser;

import java.util.Objects;

import static com.twistral.tephrium.strings.TStringUtils.*;



/**
 * FrommatFWG (FROM forMAT Fake Word Generator) allows users to generate random words using
 * <a href="https://github.com/oziris78/tffn-java-parser">TFFN formatted strings</a>. <br>
 *
 * Here are few words that were generated by the {@code "T[vl][cl][vl]![[#x][#x]!]"} format
 * string: Tulu[69], Tare[B7], Tade[14], Tina[7F].
 */
public class FrommatFWG {

    private final TRandomGenerator random;
    private final TFFNParser parser;


    public FrommatFWG(TRandomGenerator random) {
        this.random = random;

        this.parser = new TFFNParser()
            .defineDynamicAction("al", () -> getRandCharAsStrFrom(CS_ASCII_LOWER, this.random))
            .defineDynamicAction("au", () -> getRandCharAsStrFrom(CS_ASCII_UPPER, this.random))
            .defineDynamicAction("aa", () -> getRandCharAsStrFrom(CS_ASCII_ALL, this.random))
            .defineDynamicAction("vl", () -> getRandCharAsStrFrom(CS_VOWELS_LOWER, this.random))
            .defineDynamicAction("vu", () -> getRandCharAsStrFrom(CS_VOWELS_UPPER, this.random))
            .defineDynamicAction("va", () -> getRandCharAsStrFrom(CS_VOWELS_ALL, this.random))
            .defineDynamicAction("cl", () -> getRandCharAsStrFrom(CS_CONSONANTS_LOWER, this.random))
            .defineDynamicAction("cu", () -> getRandCharAsStrFrom(CS_CONSONANTS_UPPER, this.random))
            .defineDynamicAction("ca", () -> getRandCharAsStrFrom(CS_CONSONANTS_ALL, this.random))
            .defineDynamicAction("#b", () -> getRandCharAsStrFrom(CS_BINARY, this.random))
            .defineDynamicAction("#o", () -> getRandCharAsStrFrom(CS_OCTAL, this.random))
            .defineDynamicAction("#d", () -> getRandCharAsStrFrom(CS_DECIMAL, this.random))
            .defineDynamicAction("#x", () -> getRandCharAsStrFrom(CS_HEXADECIMAL, this.random))
            .defineDynamicAction("wh", () -> getRandCharAsStrFrom(CS_WHITESPACE, this.random));
    }

    public FrommatFWG() {
        this(new SplitMix64Random());
    }


    /////////////////////////////////////////////////////////////////////
    /////////////////////////////  METHODS  /////////////////////////////
    /////////////////////////////////////////////////////////////////////


    /**
     * Generates a random string using the given TFFN format string. <br><br>
     *
     * Here is a list of all actions that were defined to the parser: <br>
     * - <b>[al]</b>  =>   any lowercase ascii letter <br>
     * - <b>[au]</b>  =>   any uppercase ascii letter <br>
     * - <b>[aa]</b>  =>   any ascii letter (including both lowercase and uppercase) <br>
     * - <b>[vl]</b>  =>   any lowercase vowel <br>
     * - <b>[vu]</b>  =>   any uppercase vowel <br>
     * - <b>[va]</b>  =>   any vowel (including both lowercase and uppercase) <br>
     * - <b>[cl]</b>  =>   any lowercase consonant <br>
     * - <b>[cu]</b>  =>   any uppercase consonant <br>
     * - <b>[ca]</b>  =>   any consonant (including both lowercase and uppercase) <br>
     * - <b>[wh]</b>  =>   any whitespace character from the ASCII table <br>
     * - <b>[#b]</b>  =>   any binary number (from "01") <br>
     * - <b>[#o]</b>  =>   any octal number (from "01234567") <br>
     * - <b>[#d]</b>  =>   any decimal number (from "0123...89") <br>
     * - <b>[#x]</b>  =>   any hexadecimal number (from "0123...CDEF") <br>
     *
     * Here are some examples: <br>
     * - getRandomString("T[al][au]")                   => "ThA", "TuX", ...                    <br>
     * - getRandomString("C[vl][cl][vl]")               => "Cuxa", "Coke", ...                  <br>
     * - getRandomString("[#b][#b][#b][#b]")            => "1100", "0101", ...                  <br>
     * - getRandomString("[#d][#d][#d][#d]")            => "6704", "4811", ...                  <br>
     * - getRandomString("[#x][#x][#x][#x]")            => "A6B5", "F15E", ...                  <br>
     * - getRandomString("![Hi!] Worl[cl]!!")           => "[Hi] Worlx!", "[Hi] World!", ...    <br>
     *
     * @param format the format string
     * @return a fake word generated by the given TFFN format string
     */
    public String generateFakeWord(String format) {
        return this.parser.parse(format);
    }


    /////////////////////////////////////////////////////////////////////////
    /////////////////////////////  OBJ METHODS  /////////////////////////////
    /////////////////////////////////////////////////////////////////////////


    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if ((o == null) || (getClass() != o.getClass())) {
            return false;
        }
        FrommatFWG fwg = (FrommatFWG) o;
        return Objects.equals(random, fwg.random) && Objects.equals(parser, fwg.parser);
    }


    @Override
    public int hashCode() {
        return Objects.hash(random, parser);
    }


    @Override
    public String toString() {
        return "FrommatFWG{" + "random=" + random + ", parser=" + parser + '}';
    }


}

